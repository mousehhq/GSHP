<template>
    <div id="addProject">
        <head-top></head-top>
        <top-nav></top-nav>
        <div id="add-container">
            <div>
                <h3>新增项目</h3>
            </div>
            <el-form :model="form" :rules="rules" ref="addForm">
                <div class="margin-bottom"><span class="ieds-dot"></span>基本信息</div>

                <el-row>
                    <el-form-item :span="5" prop="proName" class="el-item">
                        <el-col :span="1" class="add-xm-title">项目名称: </el-col>
                        <el-col :span="4" class="add-input">
                            <el-input v-model="form.proName" size="small" placeholder="请输入项目名称" clearable></el-input>
                        </el-col>
                    </el-form-item>
                    <el-form-item prop="proBuildingSize" class="el-item">
                        <el-col :span="1" class="add-xm-title">建筑面积: </el-col>
                        <el-col :span="4" class="add-input">
                            <el-input v-model="form.proBuildingSize" size="small" placeholder="请输入建筑面积(M²)"
                                      clearable></el-input>
                        </el-col>
                    </el-form-item>
                </el-row>
                <el-row>
                    <el-form-item prop="proLocation" class="el-item">
                        <el-col :span="1" class="add-xm-title">项目地点: </el-col>
                        <el-col :span="4" class="add-input">
                            <el-input v-model="form.proLocation" size="small" placeholder="请输入项目地点(城市)"
                                      clearable></el-input>
                        </el-col>
                    </el-form-item>
                    <el-form-item prop="proBuildingType" class="el-item">
                        <el-col :span="1" class="add-xm-title">建筑类型: </el-col>
                        <el-col :span="4" class="add-input">
                            <el-input v-model="form.proBuildingType" size="small" placeholder="请输入建筑类型"
                                      clearable></el-input>
                        </el-col>
                    </el-form-item>
                </el-row>

                <!-- <el-button type="file" plain @click="fileOnLoad">上传特征值Excel</el-button>-->
                <div class="margin-bottom"><span class="ieds-dot"></span>特征值</div>

                <el-upload
                        class="excel-file"
                        ref="upload"
                        :action="actionUrl"
                        :on-change="onChange"
                        :on-remove="onRemove"
                        :http-request="fileHttp"
                        :file-list="form.excelFile"
                        :auto-upload="true"
                        :multiple="false">
                    <el-button slot="trigger" size="small">上传特征值Excel</el-button>
                    <div slot="tip" class="el-upload__tip">只能上传excel文件，且不超过5M</div>
                </el-upload>
                <el-form-item prop="tableData">
                    <el-table :data="tableData" v-model="form.tableData" class="add-tab" stripe
                              style="width: 810px">
                        <el-table-column prop="time" label="时间" width="150"></el-table-column>
                        <el-table-column prop="tgo" :render-header="renderHeader1" width="110"></el-table-column>
                        <el-table-column prop="tg" :render-header="renderHeader2" width="110"></el-table-column>
                        <el-table-column prop="a" label="α" width="110"></el-table-column>
                        <el-table-column prop="n" label="η" width="110"></el-table-column>
                        <el-table-column prop="cop" label="COP" width="110"></el-table-column>
                        <el-table-column prop="eer" label="EER" width="110"></el-table-column>
                    </el-table>
                    <el-row class="table-pages">
                        <el-pagination v-if="totalCnt!=0"
                                       @size-change="handleSizeChange"
                                       @current-change="handleCurrentChange"
                                       :current-page="currentPage"
                                       :page-sizes="[2, 5,10, 50]"
                                       :page-size="100"
                                       layout="total, sizes, prev, pager, next, jumper"
                                       :total="totalCnt">
                        </el-pagination>
                    </el-row>
                </el-form-item>
                <div class="add-btns">
                    <el-button type="primary" plain @click="onSubmit('addForm')">提交</el-button>
                    <router-link :to="{path: '/home'}">
                        <el-button plain>返回</el-button>
                    </router-link>
                </div>
            </el-form>
        </div>

        <footer-bottom></footer-bottom>
    </div>
</template>
<script>
    import headTop from '../../Header.vue'
    import footerBottom from '../../Footer.vue'
    import topNav from '../../TopNav.vue'
    import xlsx from 'xlsx'
    import calculate from '../../../common/calculate'

    export default {
        data() {
            return {
                actionUrl: 'http://120.79.84.167:3000' + '/project',
                form: {
                    proName: '',
                    proBuildingSize: '',
                    proLocation: '',
                    proBuildingType: '',
                    excelFile: []
                },
                rules: {
                    proName: [
                        {required: true, message: '请输入项目名称', trigger: 'blur'},
                    ],
                    proBuildingSize: [
                        {required: true, message: '请输入建筑面积', trigger: 'blur'},
                    ],
                    proLocation: [
                        {required: true, message: '请输入项目地点', trigger: 'blur'},
                    ],
                    proBuildingType: [
                        {required: true, message: '请输入建筑类型', trigger: 'blur'},
                    ]
                },
                result: {},
                allTableData: [],
                currentPage: 1,
                pageSize: 10,//每页多少行
                totalCnt: 0,
                tableData: []
            }
        },
        components: {
            headTop,
            footerBottom,
            topNav,
        },
        methods: {

            onSubmit(formName) {
                var self = this;
                var url = 'http://120.79.84.167:3000' + '/project';
                var model = {
                    projectName: this.form.proName,
                    area: this.form.proBuildingSize,
                    position: this.form.proLocation,
                    type: this.form.proBuildingType,
                    excel:self.$refs.upload.uploadFiles[0].raw
                };
                /*var model = new FormData();
                 model.append('projectName', self.form.proName);
                 model.append('area', self.form.proBuildingSize);
                 model.append('position', self.form.proLocation);
                 model.append('type', self.form.proBuildingType);
                 model.append('excel', self.$refs.upload.uploadFiles[0].raw);*/
                self.$http.post(url, model).then((response) => {
                    console.log(response);
                    this.$router.push({path: '/evaluate', query: {id: response.id}});
                });
            },

            onRemove(file, fileList) {
                this.form.excelFile = fileList;
            },

            fileHttp(){
                console.log('stop file auto upload');
                return;
            },

            onChange(file, fileList){
                console.dir(file);
                var self = this;
                this.form.excelFile = fileList.slice(-1);
                let fileReader = new FileReader();
                fileReader.onload = (ev) => {
                    try {
                        let data = ev.target.result;
                        let workbook = xlsx.read(data, {type: 'binary'});
                        let result = {};
                        let newArr = [];
                        workbook.SheetNames.forEach((sheetName) => {
                            let roa = xlsx.utils.sheet_to_json(workbook.Sheets[sheetName], {header: 1});
                            if (roa.length) {
                                result[sheetName] = roa;
                                for (let i = 0; i < sheetName; i++) {
                                    //	console.log(result[sheetName]);
                                }
                            }
                        });
                        //this.result = result[workbook.SheetNames[0]];
                        var arr = result[workbook.SheetNames[0]];

                        for (var i = 1; i < arr.length; i++) {
                            var newObj = {};
                            for (var j = 0; j < arr[0].length; j++) {
                                var key = arr[0][j];
                                if (arr[0][j].toLowerCase().trim() === 'time' || arr[0][j].toLowerCase() == '时间') {
                                    key = 'time';
                                } else if (arr[0][j].toLowerCase().trim() === 'tgo' || arr[0][j].toLowerCase().indexOf('o') > -1) {
                                    key = 'tgo';
                                } else if (arr[0][j].toLowerCase().trim() === 'tg' || arr[0][j].toLowerCase().indexOf('∆') > -1) {
                                    key = 'tg';
                                } else if (arr[0][j].toLowerCase().trim() === 'a' || arr[0][j].toLowerCase().indexOf('α') > -1) {
                                    key = 'a';
                                } else if (arr[0][j].toLowerCase().trim() === 'n' || arr[0][j].toLowerCase().indexOf('η') > -1) {
                                    key = 'n';
                                } else if (arr[0][j].toLowerCase().trim() === 'cop' || arr[0][j].toLowerCase().indexOf('c') > -1) {
                                    key = 'cop';
                                } else if (arr[0][j].toLowerCase().trim() === 'eer' || arr[0][j].toLowerCase().indexOf('e') > -1) {
                                    key = 'eer';
                                }
                                newObj[key] = arr[i][j];
                            }
                            newArr.push(newObj);
                        }
                        self.allTableData = newArr;
                        self.totalCnt = newArr.length;
                        self.handleCurrentChange(1);
                    } catch (e) {
                        this.form.excelFile = [];
                        this.$message({
                            message: '文件格式不对',
                            type: 'warning'
                        });
                    }
                    /*this.$http.post('120.79.84.167:3000/project', {
                     ProjectName: self.proName,
                     area: self.proBuildingSize,
                     position: self.proLocation,
                     type: self.proBuildingType,
                     table: this.result
                     }).then((response) => {
                     console.log(response);
                     self.$router.push('/Home');
                     })*/
                }
                fileReader.readAsBinaryString(file.raw);
            },

            renderHeader1(createElement, {column, $index}) {
                return createElement(
                    'span',
                    {
                        'class': ''
                    },
                    ['t',
                        createElement('sub', {
                                attrs: {type: 'text'},
                            }, ['g,o']
                        )
                    ]
                );
            },

            renderHeader2(createElement, {column, $index}) {
                return createElement(
                    'span',
                    {
                        'class': ''
                    },
                    ['∆t',
                        createElement('sub', {
                                attrs: {type: 'text'},

                            }, ['g']
                        )
                    ]
                );
            },

            handleSizeChange(val) {
                this.pageSize = val;
                this.handleCurrentChange(1);
            },

            handleCurrentChange(val) {
                this.currentPage = val;
                this.tableData = this.allTableData.slice((this.currentPage - 1) * this.pageSize, this.currentPage * this.pageSize);
            },

        }
    }
</script>
<style>
    #add-container {
        margin-top: 20px;
        margin-bottom: 50px;
        margin-left: 50px;
        height: 100%;
        width: calc(100% - 70px);
    }

    .add-tab {
        margin-top: 20px;
    }

    .add-btns {
        margin-top: 15px;
        margin-left: 690px;
        margin-bottom: 30px;
    }

    .add-xm-title {
        margin-top: 3px;
        width: 70px;
    }

    .add-input {
        margin-right: 40px;
        width: 250px;
    }

    .el-item {
        display: inline-block;
    }

    .ieds-dot {
        display: inline-block;
        height: 12px;
        width: 12px;
        border-radius: 6px;
        background-color: #409EFF;
        margin-right: 15px;
    }

    .table-pages {
        float: left;
    }

    .table-pages:after {
        clear: both;
    }
</style>