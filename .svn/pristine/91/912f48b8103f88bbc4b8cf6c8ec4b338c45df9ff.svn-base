<template>
    <div class="paramsList">
        <div class="EERsort">
            <el-tabs v-model="activeName" type="card" @tab-click="tabClick">
                <el-tab-pane label="各参数单独排序" name="first"></el-tab-pane>
                <el-tab-pane label="按EER排序" name="second">
                </el-tab-pane>
            </el-tabs>
        </div>

        <div class="selectSort" v-if="activeName=='first'">
            <div class="sorts" @click="handleClicks0()" v-model="isActiveUp0">
                <span class="params">tg</span>
                <span>
                    <i class="el-icon-caret-top" :class="{active:isActiveUp0}"></i>
                    <i class="el-icon-caret-bottom" v-bind:class="{active:isActiveDown0}"></i>
                </span>
            </div>
            <div class="sorts" @click="handleClicks1()" v-model="isActiveUp1"><span class="params">t</span><span><i
                    class="el-icon-caret-top" v-bind:class="{active:isActiveUp1}"></i><i class="el-icon-caret-bottom"
                                                                                         v-bind:class="{active:isActiveDown1}"></i></span>
            </div>
            <div class="sorts" @click="handleClicks2()" v-model="isActiveUp2"><span class="params">∆t</span><span><i
                    class="el-icon-caret-top" v-bind:class="{active:isActiveUp2}"></i><i class="el-icon-caret-bottom"
                                                                                         v-bind:class="{active:isActiveDown2}"></i></span>
            </div>
            <div class="sorts" @click="handleClicks3()" v-model="isActiveUp3"><span class="params">α</span><span><i
                    class="el-icon-caret-top" v-bind:class="{active:isActiveUp3}"></i><i class="el-icon-caret-bottom"
                                                                                         v-bind:class="{active:isActiveDown3}"></i></span>
            </div>
            <div class="sorts" @click="handleClicks4()" v-model="isActiveUp4"><span class="params">η</span><span><i
                    class="el-icon-caret-top" v-bind:class="{active:isActiveUp4}"></i><i class="el-icon-caret-bottom"
                                                                                         v-bind:class="{active:isActiveDown4}"></i></span>
            </div>
            <div class="sorts" @click="handleClicks5()" v-model="isActiveUp5"><span class="params">EER</span><span><i
                    class="el-icon-caret-top" v-bind:class="{active:isActiveUp5}"></i><i class="el-icon-caret-bottom"
                                                                                         v-bind:class="{active:isActiveDown5}"></i></span>
            </div>
            <div class="clear"></div>
        </div>
        <div class="selectSort" v-if="activeName=='second'">
            <div class="sorts"><span class="params">tg</span></div>
            <div class="sorts"><span class="params">t</span></div>
            <div class="sorts"><span class="params">∆t</span></div>
            <div class="sorts"><span class="params">α</span></div>
            <div class="sorts"><span class="params">η</span></div>
            <div class="sorts" @click="changeEERsort()" v-model="isActiveUp6"><span class="params">EER</span><span><i
                    class="el-icon-caret-top" v-bind:class="{active:isActiveUp6}"></i><i class="el-icon-caret-bottom"
                                                                                         v-bind:class="{active:isActiveDown6}"></i></span>
            </div>
            <div class="clear"></div>
        </div>
        <div class="clear"></div>
        <div id="myChartparam"></div>
    </div>
</template>

<script>
    export default {
        data () {
            return {
                dataOrigin: {},
                dataProjects: {},
                activeName: 'first',
//控制各参数排列顺序的值
                isActiveUp0: true,
                isActiveDown0: false,
                isActiveUp1: true,
                isActiveDown1: false,
                isActiveUp2: true,
                isActiveDown2: false,
                isActiveUp3: true,
                isActiveDown3: false,
                isActiveUp4: true,
                isActiveDown4: false,
                isActiveUp5: true,
                isActiveDown5: false,
                isActiveUp6: false,
                isActiveDown6: true,
                dataOrigin_2: {},

            }
        },

        mounted(){
            this.getParams();
        },

        props: ['dataOrigin'],

        methods: {
            /*getParams(){
             var self = this;
             var url = GSHP_SERVER_ENDPOINT + '/projects';
             self.$http.get(url)
             .then(function (response) {
             if (response.status === 200) {
             self.getDatasList(response.data);
             self.dataProjects = response.data;
             self.forEERSort();
             self.drawParam();
             }
             });
             },*/

            getDatasList(data){
                let dataOrigin = {};
                let tgo = [];
                let tg = [];
                let a = [];
                let n = [];
                let cop = [];
                let eer = [];
                for (let item of data) {
                    tgo.push(item.tgo);
                    tg.push(item.tg);
                    a.push(item.a);
                    n.push(item.n);
                    cop.push(item.cop);
                    eer.push(item.eer);
                }
                dataOrigin.tgo = tgo;
                dataOrigin.tg = tg;
                dataOrigin.a = a;
                dataOrigin.n = n;
                dataOrigin.cop = cop;
                dataOrigin.eer = eer;
                this.dataOrigin = dataOrigin;
            },
            forEERSort(){
                console.log('foreer', this.activeName);
                this.dataOrigin_2 = Object.assign([], this.dataProjects);
                this.dataOrigin_2.sort(function (a, b) {
                    return a.eer - b.eer;
                });

            },
            changeEERsort(){
                this.isActiveUp6 = !this.isActiveUp6;
                this.isActiveDown6 = !this.isActiveDown6;
                this.dataOrigin_2 = this.dataOrigin_2.reverse();
                this.drawParam();

            },
            bubbleSort(arr) {
                var len = arr.length;
                for (var i = 0; i < len; i++) {
                    for (var j = 0; j < len - 1 - i; j++) {
                        if (arr[j] > arr[j + 1]) {
                            var temp = arr[j + 1];
                            arr[j + 1] = arr[j];
                            arr[j] = temp;
                        }
                    }
                }
                return arr;
            },
            drawParam(){
                let myChart = this.$echarts.init(document.getElementById('myChartparam'));

                //项目数量，dataY为y坐标
                var dataY = [];
                for (var i = 0; i < this.dataOrigin.tgo.length; i++) {
                    dataY.push(i)
                }
                ;

                //取到数据,排序
                let aaa = Object.assign([], this.dataOrigin.tgo);
                if (this.activeName == 'first') {
                    this.bubbleSort(aaa);
                }
                ;
                //升序
                if (this.activeName == 'first' && this.isActiveUp0) {
                    aaa.reverse();
                }
                ;
                let dataParam0 = [];
                //判断：每列单独排序，按照EER排序
                if (this.activeName == 'first') {
                    for (let i = 0; i < aaa.length; i++) {
                        dataParam0.push([0, i, aaa[i]])
                    }
                    ;
                } else {
                    for (let i = 0; i < aaa.length; i++) {
                        dataParam0.push([0, i, this.dataOrigin_2[i].tgo]);
                    }
                    ;
                }
                ;


                //取到数据,排序
                let bbb = Object.assign([], this.dataOrigin.tg);
                if (this.activeName == 'first') {
                    this.bubbleSort(bbb);
                }
                ;
                //升序
                if (this.activeName == 'first' && this.isActiveUp1) {
                    bbb.reverse();
                }
                ;
                let dataParam1 = [];
                //判断：每列单独排序，按照EER排序
                if (this.activeName == 'first') {
                    for (let i = 0; i < bbb.length; i++) {
                        dataParam1.push([0, i, bbb[i]])
                    }
                    ;
                } else {
                    for (let i = 0; i < bbb.length; i++) {
                        dataParam1.push([0, i, this.dataOrigin_2[i].tg]);
                    }
                    ;
                }
                ;

                //取到数据,排序
                let ccc = Object.assign([], this.dataOrigin.n);
                if (this.activeName == 'first') {
                    this.bubbleSort(ccc);
                }
                ;
                //升序
                if (this.activeName == 'first' && this.isActiveUp2) {
                    ccc.reverse();
                }
                ;
                let dataParam2 = [];
                //判断：每列单独排序，按照EER排序
                if (this.activeName == 'first') {
                    for (let i = 0; i < ccc.length; i++) {
                        dataParam2.push([0, i, ccc[i]])
                    }
                    ;
                } else {
                    for (let i = 0; i < ccc.length; i++) {
                        dataParam2.push([0, i, this.dataOrigin_2[i].n]);
                    }
                    ;
                }
                ;

                //取到数据,排序
                let ddd = Object.assign([], this.dataOrigin.a);
                if (this.activeName == 'first') {
                    this.bubbleSort(ddd);
                }
                ;
                //升序
                if (this.activeName == 'first' && this.isActiveUp3) {
                    ddd.reverse();
                }
                ;
                let dataParam3 = [];
                //判断：每列单独排序，按照EER排序
                if (this.activeName == 'first') {
                    for (let i = 0; i < ddd.length; i++) {
                        dataParam3.push([0, i, ddd[i]])
                    }
                    ;
                } else {
                    for (let i = 0; i < ddd.length; i++) {
                        dataParam3.push([0, i, this.dataOrigin_2[i].a]);
                    }
                    ;
                }
                ;

                //取到数据,排序
                let eee = Object.assign([], this.dataOrigin.cop);
                if (this.activeName == 'first') {
                    this.bubbleSort(eee);
                }
                ;
                //升序
                if (this.activeName == 'first' && this.isActiveUp4) {
                    eee.reverse();
                }
                ;
                let dataParam4 = [];
                //判断：每列单独排序，按照EER排序
                if (this.activeName == 'first') {
                    for (let i = 0; i < eee.length; i++) {
                        dataParam4.push([0, i, eee[i]])
                    }
                    ;
                } else {
                    for (let i = 0; i < eee.length; i++) {
                        dataParam4.push([0, i, this.dataOrigin_2[i].cop]);
                    }
                    ;
                }
                ;

                //取到数据,排序
                let fff = Object.assign([], this.dataOrigin.eer);
                if (this.activeName == 'first') {
                    this.bubbleSort(fff);
                }
                ;
                //升序
                if (this.activeName == 'first' && this.isActiveUp5) {
                    fff.reverse();
                }
                ;
                let dataParam5 = [];
                //判断：每列单独排序，按照EER排序
                if (this.activeName == 'first') {
                    for (let i = 0; i < fff.length; i++) {
                        dataParam5.push([0, i, fff[i]])
                    }
                    ;

                } else {
                    for (let i = 0; i < fff.length; i++) {
                        dataParam5.push([0, i, this.dataOrigin_2[i].eer]);
                    }
                    ;
                }
                ;

                myChart.setOption({
                    //设置变色范围
                    visualMap: [{
                        //type:continuous,
                        min: Math.min.apply(null, aaa),
                        max: Math.max.apply(null, aaa),
                        precision: 0.1,
                        show: false,
                        seriesIndex: 0,
                    }, {
                        min: Math.min.apply(null, bbb),
                        max: Math.max.apply(null, bbb),
                        precision: 0.1,
                        show: false,
                        seriesIndex: 1,
                    }, {
                        min: Math.min.apply(null, ccc),
                        max: Math.max.apply(null, ccc),
                        precision: 0.01,
                        show: false,
                        seriesIndex: 2,
                    }, {
                        min: Math.min.apply(null, ddd),
                        max: Math.max.apply(null, ddd),
                        precision: 0.01,
                        show: false,
                        seriesIndex: 3,
                    }, {
                        min: Math.min.apply(null, eee),
                        max: Math.max.apply(null, eee),
                        precision: 0.1,
                        show: false,
                        seriesIndex: 4,
                    }, {
                        min: Math.min.apply(null, fff),
                        max: Math.max.apply(null, fff),
                        precision: 0.1,
                        show: false,
                        seriesIndex: 5,
                    }],
                    grid: [
                        {left: '5%', top: '20px', width: '11%'},
                        {left: '20%', top: '20px', width: '11%'},
                        {left: '35%', top: '20px', width: '11%'},
                        {left: '50%', top: '20px', width: '11%'},
                        {left: '65%', top: '20px', width: '11%'},
                        {left: '80%', top: '20px', width: '11%'},
                    ],
                    //滚动条
                    // dataZoom:[{
                    //     type:'slider',
                    //     show:true,
                    //    // xAxisIndex:5,
                    //     yAxisIndex:5,
                    //     filterMode:'filter',
                    //     minValueSpan:6,
                    //     maxValueSpan:8,
                    //     orient:'vertical',
                    //     zoomLock:true,
                    // }],
                    series: [{
                        name: 'Ⅰ',
                        type: 'heatmap',
                        xAxisIndex: 0,
                        yAxisIndex: 0,
                        data: dataParam0,
                        label: {
                            normal: {
                                show: true,
                                position: 'insideRight'
                            }
                        },
                        itemStyle: {
                            normal: {
                                color: 'rgb(128,128,128)',
                                borderWidth: '3',
                            }
                        }
                    },
                        {
                            name: 'Ⅱ',
                            type: 'heatmap',
                            xAxisIndex: 1,
                            yAxisIndex: 1,
                            data: dataParam1,
                            label: {
                                normal: {
                                    show: true,
                                    position: 'insideRight'
                                }
                            },
                            itemStyle: {
                                normal: {
                                    color: 'rgb(128,128,128)',
                                    borderWidth: '3',
                                }
                            }
                        },
                        {
                            name: 'Ⅲ',
                            type: 'heatmap',
                            xAxisIndex: 2,
                            yAxisIndex: 2,
                            data: dataParam2,
                            label: {
                                normal: {
                                    show: true,
                                    position: 'insideRight'
                                }
                            },
                            itemStyle: {
                                normal: {
                                    color: 'rgb(128,128,128)',
                                    borderWidth: '3',
                                }
                            }
                        },
                        {
                            name: 'Ⅳ',
                            type: 'heatmap',
                            xAxisIndex: 3,
                            yAxisIndex: 3,
                            data: dataParam3,
                            label: {
                                normal: {
                                    show: true,
                                    position: 'insideRight'
                                }
                            },
                            itemStyle: {
                                normal: {
                                    color: 'rgb(128,128,128)',
                                    borderWidth: '3',
                                }
                            }
                        },
                        {
                            name: 'Ⅴ',
                            type: 'heatmap',
                            xAxisIndex: 4,
                            yAxisIndex: 4,
                            data: dataParam4,
                            label: {
                                normal: {
                                    show: true,
                                    position: 'insideRight'
                                }
                            },
                            itemStyle: {
                                normal: {
                                    color: 'rgb(128,128,128)',
                                    borderWidth: '3',
                                }
                            }
                        },
                        {
                            name: 'Ⅵ',
                            type: 'heatmap',
                            xAxisIndex: 5,
                            yAxisIndex: 5,
                            data: dataParam5,
                            label: {
                                normal: {
                                    show: true,
                                    position: 'insideRight'
                                }
                            },
                            itemStyle: {
                                normal: {
                                    color: 'rgb(128,128,128)',
                                    borderWidth: '3',
                                }
                            }
                        }],
                    xAxis: [{
                        gridIndex: 0,
                        show: false,
                        boundaryGap: false,
                        type: "category",
                        axisLine: {
                            show: false,
                        },
                        axisTick: {
                            show: false
                        }
                    },
                        {
                            gridIndex: 1,
                            show: false,
                            boundaryGap: false,
                            axisLabel: {
                                interval: 0
                            },
                            type: "category",
                            axisLine: {
                                show: false,
                            },
                            axisTick: {
                                show: false
                            }
                        },
                        {
                            gridIndex: 2,
                            show: false,
                            boundaryGap: false,
                            type: "category",
                            axisLine: {
                                show: false,
                            },
                            axisTick: {
                                show: false
                            }
                        },
                        {
                            gridIndex: 3,
                            show: false,
                            boundaryGap: false,
                            type: "category",
                            axisLine: {
                                show: false,
                            },
                            axisTick: {
                                show: false
                            }
                        },
                        {
                            gridIndex: 4,
                            show: false,
                            boundaryGap: false,
                            type: "category",
                            axisLine: {
                                show: false,
                            },
                            axisTick: {
                                show: false
                            }
                        },
                        {
                            gridIndex: 5,
                            show: false,
                            boundaryGap: false,
                            type: "category",
                            axisLine: {
                                show: false,
                            },
                            axisTick: {
                                show: false
                            }
                        }
                    ],
                    yAxis: [{
                        gridIndex: 0,
                        show: false,
                        data: dataY,
                        splitArea: {
                            "show": false
                        },
                        type: "category",
                    },
                        {
                            gridIndex: 1,
                            show: false,
                            data: dataY,
                            splitArea: {
                                show: false
                            },
                            type: "category",
                        },
                        {
                            gridIndex: 2,
                            show: false,
                            data: dataY,
                            splitArea: {
                                show: false
                            },
                            type: "category",
                        },
                        {
                            gridIndex: 3,
                            show: false,
                            data: dataY,
                            splitArea: {
                                show: false
                            },
                            type: "category",
                        },
                        {
                            gridIndex: 4,
                            show: false,
                            data: dataY,
                            splitArea: {
                                show: false
                            },
                            type: "category",
                        },
                        {
                            gridIndex: 5,
                            show: false,
                            data: dataY,
                            splitArea: {
                                show: false
                            },
                            type: "category",
                        }
                    ]

                });
            },

            tabClick(){
                if (this.activeName == 'second') {
                    this.forEERSort();
                    this.drawParam();
                }
                else {
                    if (this.activeName == 'first') {
                        this.drawParam();
                    }
                }
            },

            handleClicks0(){
                this.isActiveUp0 = !this.isActiveUp0;
                this.isActiveDown0 = !this.isActiveDown0;
                this.drawParam();
            },
            handleClicks1(){
                this.isActiveUp1 = !this.isActiveUp1;
                this.isActiveDown1 = !this.isActiveDown1;
                this.drawParam();
            },
            handleClicks2(){
                this.isActiveUp2 = !this.isActiveUp2;
                this.isActiveDown2 = !this.isActiveDown2;
                this.drawParam();
            },
            handleClicks3(){
                this.isActiveUp3 = !this.isActiveUp3;
                this.isActiveDown3 = !this.isActiveDown3;
                this.drawParam();
            },
            handleClicks4(){
                this.isActiveUp4 = !this.isActiveUp4;
                this.isActiveDown4 = !this.isActiveDown4;
                this.drawParam();
            },
            handleClicks5(){
                this.isActiveUp5 = !this.isActiveUp5;
                this.isActiveDown5 = !this.isActiveDown5;
                this.drawParam();
            },

        }
    }

</script>

<!-- Add "scoped" attribute to limit CSS to this component only -->
<style scoped>
    #myChartparam {
        width: 100%;
        height: 460px;
        float: left;
    }

    .clear {
        clear: both
    }

    .paramsList {
        width: 70%;
        float: left;
    }

    .paramsList .EERsort .el-tabs {
        margin-left: 0;
    }

    .selectSort {
        width: 100%;
        height: 30px;
        padding: 0 3%;
        margin-top: 20px;
    }

    .sorts {
        margin: 0 auto;
        width: 15%;
        height: 30px;
        float: left;
        text-align: center;
        cursor: pointer;
    }

    .sorts span {
        display: inline-block;
        vertical-align: top;
    }

    .sorts span.params {
        font-size: 18px;
    }

    .sorts i {
        display: block;
        height: 0;
        border: 4px solid transparent;
    }

    .active {
        color: #409EFF;
    }


</style>