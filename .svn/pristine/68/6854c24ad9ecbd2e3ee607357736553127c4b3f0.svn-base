<template>
    <div id="data-page">
        <head-top></head-top>
        <top-nav></top-nav>
        <div class="main-container">
            <project-list ref="projectlist" v-on:setFirstId="getFirstId" @editSuccess="editSuccess"></project-list>
            <div class="nav-right view row-container">
                <div class="page-title" v-show="id">
                    {{name}}
                    <el-tooltip class="item" effect="dark" content="编辑" placement="top-start">
                        <el-button type="text" icon="el-icon-edit" class="margin-left" @click="editClick"></el-button>
                    </el-tooltip>
                    <el-tooltip class="item" effect="dark" content="删除" placement="top-start">
                        <el-button type="text" icon="el-icon-delete" class="margin-left"
                                   @click="deleteClick"></el-button>
                    </el-tooltip>
                    <el-date-picker class="datePicker"
                                    @change="dateChange"
                                    v-model="year"
                                    align="right"
                                    type="year"
                                    :clearable=false
                                    value-format="yyyy"
                                    placeholder="请选择年份">
                    </el-date-picker>
                </div>
                <div class="none-item" style="padding-top: 100px" v-show="(allDataList.length==0&&id)||!id">
                    暂无项目或者您的项目在{{year}}年没有上传参数
                </div>
                <div class="chart-container" v-show="allDataList.length!=0">
                    <!--<div>{{year}}年数据折线图</div>-->
                    <div class="season-container">
                        <div class="season-title">供暖季</div>
                        <line-chart ref="hotTgioLine" :field="'tgio'" :season="'hot'"
                                    style="margin-right: 100px"></line-chart>
                        <line-chart ref="hotTuioLine" :field="'tuio'" :season="'hot'"></line-chart>
                        <line-chart ref="hotGuLine" :field="'gu'" :season="'hot'"></line-chart>
                        <line-chart ref="hotGgLine" :field="'gg'" :season="'hot'"></line-chart>
                    </div>
                    <div class="season-container">
                        <div class="season-title">供冷季</div>
                        <line-chart ref="coldTgioLine" :field="'tgio'" :season="'cold'"></line-chart>
                        <line-chart ref="coldTuioLine" :field="'tuio'" :season="'cold'"></line-chart>
                        <line-chart ref="coldGuLine" :field="'gu'" :season="'cold'"></line-chart>
                        <line-chart ref="coldGgLine" :field="'gg'" :season="'cold'"></line-chart>
                    </div>
                </div>
            </div>

        </div>
    </div>
</template>
<script>
    import headTop from '../../Header.vue'
    import topNav from '../../TopNav.vue'
    import projectList from './ProjectList.vue'
    import lineChart from './LineChart.vue'

    export default {
        data() {
            return {
                id: '',
                project: {},
                name: '',
                year: new Date().getFullYear().toString(),
                allDataList: [],
                dataObj: {},
                loading: {}
            }
        },
        components: {
            headTop,
            topNav,
            projectList,
            lineChart
        },
        watch: {
            '$route'(to, from) {
                this.loading = this.$loading.service({
                    lock: true,
                    text: '拼命加载中',
                    spinner: 'el-icon-loading',
                    background: 'rgba(0, 0, 0, 0.8)',
                    fullscreen: true
                });
                this.id = this.$route.query.id;
                if (this.id) {
                    this.getDatasList();
                } else {
                    this.allDataList = [];
                    this.dataObj = {};
                }
            }
        },
        created() {
            this.loading = this.$loading.service({
                lock: true,
                text: 'Loading',
                spinner: 'el-icon-loading',
                background: 'rgba(0, 0, 0, 0.7)',
                fullscreen: true
            });
            this.id = this.$route.query.id;
            if (this.id) {
                this.getDatasList();
            } else {
                this.$router.push({path: '/data'});
            }
        },
        mounted() {


        },
        methods: {
            editSuccess(name) {
                this.getDatasList();
            },

            getFirstId(firstId) {
                if (!this.$route.query.id && firstId) {
                    this.$router.push({path: '/data', query: {id: firstId}});
                    this.getDatasList();
                }
            },

            dateChange() {
                //发送请求,刷新tableData
                this.loading = this.$loading.service({
                    lock: true,
                    text: '拼命加载中',
                    spinner: 'el-icon-loading',
                    background: 'rgba(0, 0, 0, 0.8)',
                    fullscreen: true
                });
                this.getDatasList();
            },

            getDatasList() {
                //从后台接口获取

                var self = this;
                let url = GSHP_SERVER_ENDPOINT + '/dataProject/getProjectsParamsByIdAndYear';

                self.$http.get(url, {
                    params: {
                        id: self.$route.query.id,
                        year: self.year
                    }
                }).then((response) => {
                    if (response.status === 200) {
                        console.log('getProjectsParamsByIdAndYear', response);


                        this.name = response.data.name;
                        this.allDataList = response.data.table;
                        if (this.allDataList.length === 0) {
                            return;
                        }
                        this.dataObj = this.getDataBar(self.allDataList);
                        this.triggerChild();
                        self.loading.close();
                        /*var obj = this.dataObj;
                         this.$store.dispatch('initDataState', this.dataObj);*/

                    }
                });

            },

            getDataBar(data) {
                /*原始数据*/
                let self = this;
                let hotArr = [];
                let coldArr = [];
                let sortedHot = [];
                let sortedCold = [];
                /*补全数据后的数组*/
                let hotTimeFull = [];
                let hottuiFull = [];
                let hottuoFull = [];
                let hottgiFull = [];
                let hottgoFull = [];
                let hotguFull = [];
                let hotggFull = [];
                let coldTimeFull = [];
                let coldtuiFull = [];
                let coldtuoFull = [];
                let coldtgiFull = [];
                let coldtgoFull = [];
                let coldguFull = [];
                let coldggFull = [];
                /*将从后台获取的数据存入对象数组，分冷热*/
                for (let item of data) {
                    let obj = {};
                    if (item.hot) {
                        /*这里可能会跨年，不能直接设置日期*/
                        obj.timeTicks = item['time'] ? (new Date(item['time'])).getTime() : null;
                        obj.tui = item['tui'] ? item['tui'] : '';
                        obj.tuo = item['tuo'] ? item['tuo'] : '';
                        obj.tgi = item['tgi'] ? item['tgi'] : '';
                        obj.tgo = item['tgo'] ? item['tgo'] : '';
                        obj.gu = item['gu'] ? item['gu'] : '';
                        obj.gg = item['gg'] ? item['gg'] : '';
                        hotArr.push(obj);
                    } else {
                        obj.timeTicks = item['time'] ? (new Date(item['time'])).getTime() : null;
                        obj.tui = item['tui'] ? item['tui'] : '';
                        obj.tuo = item['tuo'] ? item['tuo'] : '';
                        obj.tgi = item['tgi'] ? item['tgi'] : '';
                        obj.tgo = item['tgo'] ? item['tgo'] : '';
                        obj.gu = item['gu'] ? item['gu'] : '';
                        obj.gg = item['gg'] ? item['gg'] : '';
                        coldArr.push(obj);
                    }
                }
                /*排序*/
                let hotIndex = 0;
                let coldIndex = 0;
                /*sortedHot = hotArr.sort((a, b) => {
                 return a.timeTicks - b.timeTicks;
                 });
                 sortedCold = coldArr.sort((a, b) => {
                 return a.timeTicks - b.timeTicks;
                 });*/
                let hotSpan = self.getDateSpan(true);
                let coldSpan = self.getDateSpan(false);
                /*判断，补空*/
                for (let hotItem of hotSpan) {
                    if (hotIndex < hotArr.length && hotSpan.indexOf(hotArr[hotIndex].timeTicks) > -1) {
                        hotTimeFull.push(hotArr[hotIndex].timeTicks);
                        hottuiFull.push(hotArr[hotIndex].tui);
                        hottuoFull.push(hotArr[hotIndex].tuo);
                        hottgiFull.push(hotArr[hotIndex].tgi);
                        hottgoFull.push(hotArr[hotIndex].tgo);
                        hotguFull.push(hotArr[hotIndex].gu);
                        hotggFull.push(hotArr[hotIndex].gg);
                        hotIndex++;
                    } else {
                        hotTimeFull.push(hotItem);
                        hottuiFull.push('-');
                        hottuoFull.push('-');
                        hottgiFull.push('-');
                        hottgoFull.push('-');
                        hotguFull.push('-');
                        hotggFull.push('-');
                    }
                }

                for (let coldItem of coldSpan) {
                    coldTimeFull.push(coldItem);
                    if (coldIndex < coldArr.length && coldSpan.indexOf(coldArr[coldIndex].timeTicks) > -1) {
                        coldtuiFull.push(coldArr[coldIndex].tui);
                        coldtuoFull.push(coldArr[coldIndex].tuo);
                        coldtgiFull.push(coldArr[coldIndex].tgi);
                        coldtgoFull.push(coldArr[coldIndex].tgo);
                        coldguFull.push(coldArr[coldIndex].gu);
                        coldggFull.push(coldArr[coldIndex].gg);
                        coldIndex++;
                    } else {
                        coldtuiFull.push('-');
                        coldtuoFull.push('-');
                        coldtgiFull.push('-');
                        coldtgoFull.push('-');
                        coldguFull.push('-');
                        coldggFull.push('-');
                    }
                }

                let obj = {
                    hotTime: hotTimeFull,
                    hottui: hottuiFull,
                    hottuo: hottuoFull,
                    hottgi: hottgiFull,
                    hottgo: hottgoFull,
                    hotgu: hotguFull,
                    hotgg: hotggFull,
                    coldTime: coldTimeFull,
                    coldtui: coldtuiFull,
                    coldtuo: coldtuoFull,
                    coldtgi: coldtgiFull,
                    coldtgo: coldtgoFull,
                    coldgu: coldguFull,
                    coldgg: coldggFull,
                };
                return obj;
            },
//供冷季节4/15-11/15 ，供暖季节11/15-4/15，x轴这么显示
            getDateSpan(isHot) {
                let self = this;
                let timeSpan = [];
                let startDate = new Date();
                let endDate = new Date();
                startDate = isHot ? new Date(self.year + "/11/14") : new Date(self.year + "/4/15");
                endDate = isHot ? new Date((parseInt(self.year) + 1).toString() + "/4/14") : new Date(self.year + "/11/15");

                console.log('startDate' + startDate);
                console.log('endDate' + endDate);
                while ((endDate.getTime() - startDate.getTime()) > 0) {
                    let temp = startDate.getTime();
                    //let temp = self.dateClone(startDate);
                    startDate.setHours(startDate.getHours() + 1);
                    timeSpan.push(temp);
                }
                return timeSpan;
            },

            triggerChild() {
                let hotTgioLine = [];
                let coldTgioLine = [];
                let hotTuioLine = [];
                let coldTuioLine = [];
                let hotGuLine = [];
                let coldGuLine = [];
                let hotGgLine = [];
                let coldGgLine = [];
                let hotTime = [];
                let coldTime = [];

                if (this.dataObj && this.dataObj.hotTime.length > 0) {
                    hotTime = this.dataObj.hotTime;
                    hotTgioLine[0] = this.dataObj.hottgi;
                    hotTgioLine[1] = this.dataObj.hottgo;
                    hotTuioLine[0] = this.dataObj.hottui;
                    hotTuioLine[1] = this.dataObj.hottuo;
                    hotGuLine = this.dataObj.hotgu;
                    hotGgLine = this.dataObj.hotgg;
                }
                this.$refs.hotTgioLine.getLineData(hotTgioLine, hotTime);
                this.$refs.hotTuioLine.getLineData(hotTuioLine, hotTime);
                this.$refs.hotGuLine.getLineData(hotGuLine, hotTime);
                this.$refs.hotGgLine.getLineData(hotGgLine, hotTime);

                if (this.dataObj && this.dataObj.coldTime.length > 0) {
                    coldTime = this.dataObj.coldTime;
                    coldTgioLine[0] = this.dataObj.coldtgi;
                    coldTgioLine[1] = this.dataObj.coldtgo;
                    coldTuioLine[0] = this.dataObj.coldtui;
                    coldTuioLine[1] = this.dataObj.coldtuo;
                    coldGuLine = this.dataObj.coldgu;
                    coldGgLine = this.dataObj.coldgg;
                }
                this.$refs.coldTgioLine.getLineData(coldTgioLine, coldTime);
                this.$refs.coldTuioLine.getLineData(coldTuioLine, coldTime);
                this.$refs.coldGuLine.getLineData(coldGuLine, coldTime);
                this.$refs.coldGgLine.getLineData(coldGgLine, coldTime);

            },

            editClick() {
                this.$refs.projectlist.projectAdd(true, this.name);
            },

            deleteClick() {
                var self = this;
                this.$confirm('此操作将永久删除该项目以及该项目的所有参数信息, 是否继续?', '提示', {
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                    type: 'warning'
                }).then(() => {
                    var url = GSHP_SERVER_ENDPOINT + '/dataProject/delete?id=' + self.$route.query.id;
                    self.$http.delete(url)
                        .then(function (response) {
                            if (response.status === 200) {
                                self.$message({
                                    type: 'success',
                                    message: '删除项目"' + self.name + '"成功!'
                                });
                                self.$router.push({path: '/data'});
                            }
                        })
                        .catch(function (error) {
                            self.$message({
                                type: 'error',
                                message: '删除失败!'
                            });
                        });
                }).catch(() => {
                    this.$message({
                        type: 'info',
                        message: '已取消删除'
                    });
                });
            },

            goBack() {
                this.$router.go(-1);
            }
        }
    }
</script>
<style>
    .season-container {
        display: inline-block;
        width: 48%;
        text-align: center;
    }

    .chart-container {
        margin-top: 40px;
    }

    .season-title {
        margin-bottom: 30px;
    }

    .datePicker {
        margin-left: 50px;
        /*position: absolute;
        right: 50px;
        top: 85px;*/
    }
</style>