/**
 * Created by haoqianhuang on 2017/12/29.
 */

var tableData = [];
const calculate = {

	//输入：读取excel表并转化为对象数组的data，季节，输出显示的tableData，包括tgo, tg, a, n, cop, eer
	//位置：addProject
	_getTableData: (data,season) =>{
		var self = calculate;
		for(let i of data){
			//用户侧温差
			let deltatu = Math.abs(data[i].tui-data[i].tuo);

			//用户侧换热量
			let Qu = self._getQu(data,i);

			//地源侧温差
			let deltatg = self._getDeltatg();

			//地源侧换热量
			let Qg = 1/3600*1000*4.18*deltatg*data[i].Gg;

			//总能耗
			let P = self._getP(data,i);

			//机组能效COP
			let COP = self._getCOP(data,i) ;

			let tL = self._gettL(data,season,i);
			let tH = self._gettH(data,season,i);
			//卡诺循环能效COPc
			let COPc = self._getCOPc(data,season,i);

			//系统能效EER:
			let EER = self._getEER(data,i);

			//水输送效率:
			let WTEu = self._getWTEu(data,i);

			let WTEg = Qu/data[i].Pg;
			let beta = self._getBeta(data.i);

			//alpha
			let alpha = data[i].Pl/P;

			//eta
			let eta = self._getEta(data,i);

			//特征值表子元素
			let obj = {};
			obj.tgo = data[i].tgo;
			obj.deltatg = deltatg;
			obj.alpha = alpha;
			obj.eta = eta;
			obj.COP = COP;
			obj.EER = EER;

			tableData.push(obj);
		}
		return tableData;
	},

	/*贾坤那边每次重新排序后调用,arr为当前改版的一列*/
	afterSort:(tableData,index,arr,season)=>{
		let self = this;
		let data = [];
		self.tableData[index] = arr;
		self.tableData = numbers.matrix.rotate(tableData, 90, counterclockwise);
		self.tableData = numbers.matrix.reverseRows(tableData);
		let keys = ['tgo','deltatg','alpha','eta','COP','EER'];
		self.tableData.push(keys);
		for(let i = 0;i<tableData.length;i++){
			for(let j = 0;j<tableData[i].length;j++){
				let key = tableData[length-1][j];
				data[key] = tableData[i][j];
			}
		}
		self.dataList = data;
		console.log(data);
		let EERArr = self._getDeltaEER(dataList,season);
	},

	_getDeltatg:(data,index)=>{
		return  Math.abs(data[index].tgi-data[index].tgo);
	},

	_getQu:(data,index)=>{
		let deltatu = Math.abs(data[index].tui-data[index].tuo);
		return 1/3600*1000*4.18*deltatu*data[index].Gu;
	},

	_getCOP:(data,index)=>{
		let Qu = _getQu(data,index);
		return data[index].Qu/data[index].Pl;
	},

	_getCOPc:(data,season,index)=>{
		let tL = _gettL(data,season,index);
		let tH = _gettH(data,season,index);
		return (season == summer) ? tL/(tH - tL) : tH/(tH - tL);
	},

	_getP:(data,index)=>{
		return data[index].Pl + data[index].Pg + data[index].Pu;
	},

	//tL存入数组tLs
	_gettL:(data,season,index) => {
		let tL = (season == summer)?(data[index].tui+data[index].tuo)/2-5 : (data[index].tgi+data[index].tgo)/2-5;
		return tL;
	},

	//将tH存入数组tHs
	_gettH:(data,season,index) => {
		let tH = (season == summer)?(data[index].tgi+data[index].tgo)/2+5 : (data[index].tui+data[index].tuo)/2+5;
		return tH;
	},

	_getEER:(data,index)=>{
		let Qu = _getQu(data,index);
		let P = _getP(data,index);
		return  Qu/P;
	},

	_getWTEu:(data,index)=>{
		let Qu = _getQu(data,index);
		return Qu/data[index].Pu;
	},


	_getBeta:(data,index)=>{
		let Qu = _getQu(data,index);
		return Qu/(data[index].Pu + data[index].Pg);
	},

	_getEta:(data,index)=>{
		let COP = _getCOP(data,index) ;
		let COPc = _getCOPc(data,season,index);
		return COP/COPc;
	},



	/*权重部分*/
	_getWtEERt:(data,pos,season)=>{
		let EtaArr = _getEtaArr(data);
		let _Eta = _getAvg(data,EtaArr);

		let deltatgArr = _getDeltatgArr(data);
		let _deltatg = _getAvg(data,deltatgArr);

		let tLArr = _gettLArr(data,season);
		let _tL = _getAvg(data,tLArr);

		let betaArr = _getBetaArr(data);
		let _beta = _getAvg(data,betaArr);

		let tHArr = _gettHArr(data,season);
		let _tH = _getAvg(data,tHArr);

		let tgoArr = _gettgoArr(data);

		let tgoVal = _getQuar(tgoArr,pos);
		if(season == summer){
			return [1/(1/_Eta*(tgoVal + 0.5*_deltatg + 5 -_tL)/(_tL + 273.15) + 1/_beta),tgoVal];
		}
		else if(season == winter){
			return [1/(1/_Eta*(_tH - (tgoVal - 0.5*_deltatg - 5)/(_tL + 273.15) + 1/_beta)),tgoVal];
		}
		else{
			this.$message({
				message: '文件格式不对',
				type: 'warning'
			});
		}
	},

	_getWDeltaEER:(data,pos)=>{
		let COPArr = _getCOPArr(data);
		let _COP = _getAvg(data,COPArr);

		let WTEArr = _getWTEArr(data);
		let _WTE = _getAvg(data,WTEArr);

		let EERArr = _getEERArr(data);
		let _EER = _getAvg(data,EER);

		let deltatgArr = _getDeltatgArr(data);
		let _deltatg = _getAvg(data,deltatgArr);

		let tgVal = _getQuar(deltatgArr,pos);
		return [1/(1/_COP + 1/_WTE + _deltatg/tgVal*(1/_EER-1/_COP-1/_WTE)),tgVal];
	},

	_getWEtaEQuar:(data,pos)=>{
		let COPArr = _getCOPArr(data);
		let _COP = _getAvg(data,COPArr);

		let betaArr = _getBetaArr(data);
		let _beta = _getAvg(data,betaArr);

		let EtaArr = _getEtaArr(data);
		let etaVal = _getQuar(EtaArr,pos);
		return [1/(1/(etaVal*_COP) + 1/_beta),etaVal];
	},

	_getWAlphaEER:(data,pos)=>{
		let EtaArr = _getEtaArr(data);
		let _Eta = _getAvg(data,EtaArr);

		let COPArr = _getCOPArr(data);
		let _COP = _getAvg(data,COPArr);

		let alphaArr = _getAlphaArr(data);
		let alphaVal = _getQuar(alphaArr,pos);
		return [alphaVal*_Eta*_COP,alphaVal];
	},

	_getW:(data,type,season)=>{
		let EERslt1;
		let EERslt2;

		let deltatgArr = _getDeltatgArr(data);
		let EtaArr = _getEtaArr(data);
		let alphaArr = _getAlphaArr(data);

		switch(type)
		{
			case 't':
				EERslt1 = _getWtEERt(data,1,season);
				EERslt2 = _getWtEERt(data,3,season);
				break;
			case 'delta':
				EERslt1 = _getWDeltaEER(deltatgArr,1);
				EERslt2 = _getWDeltaEER(deltatgArr,3);
				break;
			case 'eta':
				EERslt1 = _getWEtaEQuar(EtaArr,1);
				EERslt2 = _getWEtaEQuar(EtaArr,3);
				break;
			case 'alpha':
				EERslt1 = _getWAlphaEER(alphaArr,1);
				EERslt2 = _getWAlphaEER(alphaArr,3);
				break;
			default:
				alert("参数错误");
				break;
		}

		let _EER1 = EERslt1[0];
		let _EER2 = EERslt2[0];
		let _denom1 = EERslt1[1];
		let _denom2 = EERslt2[1];

		return (_EER1 - _EER2)/(_denom1 - _denom2);
	},

	_getWVector:(data,season)=>{
		let self = this;
		let Wt = _getW(data,'t',season);
		let Wdelta = _getW(data,'delta',season);
		let Weta = _getW(data,'eta',season);
		let Walpha = _getW(data,'alpha',season);
		let arr = [];
		arr.push(Wt,Wdelta,Weta,Walpha);
		console.log('arr' + arr);
		return arr;
	},

	_getX:(table)=>{
		let A = [];
		let Ao = [0, 0, 0, 0];
		let n = table.length;
		console.log(n);
		//将字符串前后空格去掉，解析为浮点数
		for (let row of table) {
			row.tgo = parseFloat(row.tgo);
			row.tg = parseFloat(row.tg);
			row.a = parseFloat(row.a);
			row.n = parseFloat(row.n);
			row.cop = parseFloat(row.cop);
			row.eer = parseFloat(row.eer);
		}
		//存为二维数组
		for (let row of table) {

			let temp = [];
			temp.push(row.tgo);
			temp.push(row.tg);
			temp.push(row.a);
			temp.push(row.n);
			A.push(temp);
		}

		//获得均值
		for (let row of table) {
			Ao[0] += row.tgo;
			Ao[1] += row.tg;
			Ao[2] += row.a;
			Ao[3] += row.n;
		}
		Ao = Ao.map((item) => item/n);
		console.log(Ao);

		//获得偏差矩阵
		console.log(222,A);
		console.log('Ao: ' + Ao);
		for (let i = 0; i < n; i++) {
			A[i] = numbers.matrix.subtraction(A[i], Ao);
		}

		console.log(3333,A);
		return A;
	},

	_getF:(X,_vector)=>{
		for (let i = 0; i < n; i++) {
			X[i] = numbers.matrix.multiply(X[i], _vector);
		}
		return X;
	},

	/*最终结果*/
	_getDeltaEER:(data,season)=>{
		let _vector = _getWVector(data,season);
		let X = _getX(data);
		let F = _getF(X,_vector);
		let DeltaEER = [];
		for(let i of F){
			for(let j of F[i]){
				DeltaEER[i] += F[i][j];
			}
		}
		return DeltaEER;
	},
	

	/*先存进数组，再求平均数*/
	_getEtaArr:(tableData)=>{
		let EtaArr = [];
		for(let i = 0;i<tableData.length;i++){
			EtaArr.push(tableData[i].eta);
		}
		return EtaArr;
	},

	_getDeltatgArr:(data)=>{

		let deltatgArr = [];
		for(let i = 0;i<data.length;i++){
			deltatgArr.push(_getDeltatg(data,i));
		}
		return deltatgArr;
	},

	_gettLArr:(data,season)=>{
		let tLArr = [];
		for(let i = 0;i<data.length;i++){
			tLArr.push(_gettL(data,season,i));
		}
		return tLArr;
	},

	_getBetaArr:(data)=>{
		let betaArr = [];
		for(let i = 0;i<data.length;i++){
			betaArr.push(_getBeta(data,i));
		}
		return betaArr;
	},

	_gettHArr:(data,season)=>{
		let tHArr = [];
		for(let i = 0;i<data.length;i++){
			tHArr.push(_gettH(data,season,i));
		}
		return tHArr;
	},

	_gettgoArr:(data)=>{
		let tgoArr = [];
		for(let i = 0;i<data.length;i++){
			tgoArr.push(data[i].tgo);
		}
		return tgoArr;
	},

	_getCOPArr:(tableData)=>{
		let COPArr = [];
		for(let i = 0;i<tableData.length;i++){
			COPArr.push(tableData[i].COP);
		}
		return COPArr;
	},

	_getWTEArr:(data)=>{
		let WTEArr = [];
		for(let i = 0;i<data.length;i++){
			WTEArr.push(_getWTEu(data,i));
		}
		return WTEArr;
	},

	_getEERArr:(data)=>{
		let EERArr = [];
		for(let i = 0;i<data.length;i++){
			EERArr.push(_getEER(data,i));
		}
		return EERArr;
	},

	_getAlphaArr:(tableData)=>{
		let AlphaArr = [];
		for(let i = 0;i<tableData.length;i++){
			AlphaArr.push(tableData[i].alpha);
		}
		return AlphaArr;
	},




	_getAvg:(data,index)=>{
		let avg;
		for(let i = 0; i < data.length;i++){
			avg += data[i].index;
		}
		avg = avg/data.length;
		return avg ;
	},



	//计算四分位数,输入：数组和上/下分位，index为1或者3
	_getQuar: (arr, index) => {
		var self = calculate;
		let quartile;
		let sortedArr = self._sortArr(arr);
		let num = (sortedArr.length + 1) / 4 * index;
		let integer = parseInt(num);
		//分为整数和小数两种情况
		if (integer === num) {
			quartile = sortedArr[num - 1];
		}
		else {
			quartile = sortedArr[integer - 1] * 0.25 + sortedArr[integer] * 0.75;
		}
		console.log('quartile ' + quartile);
		return quartile;
	},

	_sortArr: (arr) => {
		return arr.sort(function (a, b) {
			return a - b;
		});
	}
}
export default  calculate